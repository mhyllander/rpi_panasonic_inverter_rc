<!DOCTYPE html>
<html>
<head>
    <title>{{.PageTitle}}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        * {
            font-family: arial;
        }

        /* Control panel */
        .controlpanel {
            width: 100%;
            margin-top: 10px;
            align-items: center;
            position: fixed;
            bottom: 0;
            left: 0;
            background-color: #e7f0fe;
            border-top: 1px solid black;
            padding: 4px;
        }
        .buttons {
            float: right;
        }
        .buttons button {
            padding: 10px;
            margin-right: 10px;
            border-radius: 8px;
            border: 2px solid gray;
            font-size: 20px;
        }

        /* Info message box */
        .info {
            float: left;
            margin-left: 10px;
            padding: 10px;
            border-radius: 8px;
            border: 2px solid #0a69fa;
            background-color: #5f9dfb;
            color: white;
            text-align: center;
        }

        /* Alert message box */
        .alert {
            background-color: #f44336; /* Red */
            color: white;
            padding: 4px;
            margin-top: 10px;
            margin-bottom: 10px;
        }
        .alert p {
            padding: 0px;
            margin-top: 2px;
            margin-bottom: 2px;
        }

        /* Control panel animation */
        .hidden {
            display: none;
        }
        .btn_highlight {
            background-color: #adcaf7;
        }

        /* Settings */
        .setting {
            height: 28px;
            font-size: 16px;
            display: flex;
            align-items: center;
        }
        .label {
            flex-basis: 130px;
        }
        .input input, .input select {
            font-size: inherit;
            margin-left: 0px;
            margin-right: 0px;
        }
        input[type="checkbox"] {
            margin-top: 4px;
            margin-bottom: 4px;
            width: 18px;
            height: 18px;
        }
        .tempsetting {
            height: unset;
        }
        .tempinputs {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }
        .tempslider {
            flex-grow: 1;
            display: flex;
        }
        .slider {
            appearance: none;
            flex-grow: 1;
            margin-top: 4px;
            margin-bottom: 4px;
            height: 18px;
            max-width: 300px;
            background: #d3d3d3;
            outline: none;
            opacity: 0.7;
            transition: opacity .2s;
        }
        .slider:hover {
            opacity: 1;
        }

        /* Responsive layout */
        @media (max-width: 280px) {
            .setting {
                flex-direction: column;
                height: unset;
                margin-bottom: 10px;
            }
            .label {
                flex-basis: unset;
                align-self: flex-start;
            }
            .input {
                align-self: flex-end;
            }
        }

        /* Input validation */
        input:invalid {
            border: 2px dashed red;
        }
        input:invalid:required {
            background-color: rgb(250,200,200);
        }
    </style>
</head>
<body>
    <h1>{{.PageTitle}}</h1>
    <div id="settingscontainer">
        <h3>Settings</h3>
        <div class="setting">
            <div class="label">Power</div>
            <div class="input">
                <input type="checkbox" id="power">
            </div>
        </div>
        <div class="setting">
            <div class="label">Mode</div>
            <div class="input">
                <select id="mode">
                    <option value="heat">Heat</option>
                    <option value="cool">Cool</option>
                    <option value="dry">Dry</option>
                    <option value="auto" selected>Auto</option>
                </select>
            </div>
        </div>
        <div class="setting">
            <div class="label">Powerful</div>
            <div class="input">
                <input type="checkbox" id="powerful">
            </div>
        </div>
        <div class="setting">
            <div class="label">Quiet</div>
            <div class="input">
                <input type="checkbox" id="quiet">
            </div>
        </div>
        <div class="setting tempsetting">
            <div class="label">Temperature</div>
            <div class="input tempinputs">
                <div class="tempinput">
                    <input type="number" id="temperature" min="16" max="30" value="20" required>
                </div>
                <div class="tempslider">
                    <input type="range" id="temperature_slider" class="slider" min="16" max="30" value="20">
                </div>
            </div>
        </div>
        <h3>Air Flow</h3>
        <div class="setting">
            <div class="label">Fan Speed</div>
            <div class="input">
                <select id="fan_speed">
                    <option value="highest">Highest</option>
                    <option value="high">High</option>
                    <option value="middle">Middle</option>
                    <option value="low">Low</option>
                    <option value="lowest">Lowest</option>
                    <option value="auto" selected>Auto</option>
                </select>
            </div>
        </div>
        <div class="setting">
            <div class="label">Vertical Swing</div>
            <div class="input">
                <select id="vent_vertical">
                    <option value="highest">Highest</option>
                    <option value="high">High</option>
                    <option value="middle">Middle</option>
                    <option value="low">Low</option>
                    <option value="lowest">Lowest</option>
                    <option value="auto" selected>Auto</option>
                </select>
            </div>
        </div>
        <div class="setting">
            <div class="label">Horizontal Swing</div>
            <div class="input">
                <select id="vent_horizontal">
                    <option value="farleft">Far left</option>
                    <option value="left">Left</option>
                    <option value="middle">Middle</option>
                    <option value="right">Right</option>
                    <option value="farright">Far right</option>
                    <option value="auto" selected>Auto</option>
                </select>
            </div>
        </div>
        <h3>Timers</h3>
        <div class="setting">
            <div class="label">Timer On</div>
            <div class="input">
                <input type="checkbox" id="timer_on">
            </div>
        </div>
        <div class="setting">
            <div class="label">Timer On Time</div>
            <div class="input">
                <input type="time" id="timer_on_time" value="">
            </div>
        </div>
        <div class="setting">
            <div class="label">Timer Off</div>
            <div class="input">
                <input type="checkbox" id="timer_off">
            </div>
        </div>
        <div class="setting">
            <div class="label">Timer Off Time</div>
            <div class="input">
                <input type="time" id="timer_off_time" value="">
            </div>
        </div>
        <div id="filler"></div>
        <div id="controlpanel" class="controlpanel">
            <div id="alert" class="alert hidden"></div>
            <div class="buttons">
                <button type="button" id="refresh_button">Refresh</button>
                <button type="button" id="send_button">Send</button>
            </div>
            <div id="info" class="info hidden"></div>
        </div>
    </div>
    <script type="text/javascript">
        async function getSettings() {
            const response = await fetch('/api/v1/settings', {
                method: 'GET',
                mode: 'same-origin',
                cache: 'no-cache',
                redirect: 'error',
                referrerPolicy: 'no-referrer'
            })
            if (!response.ok) {
                throw new Error(`Retrieve settings failed: ${response.statusText} (${response.status})`)
            }
            return await response.json()
        }

        async function postSettings(settings) {
            const response = await fetch('/api/v1/settings', {
                method: 'POST',
                mode: 'same-origin',
                cache: 'no-cache',
                headers: {
                    'Content-Type': 'application/json',
                },
                redirect: 'error',
                referrerPolicy: 'no-referrer',
                body: JSON.stringify(settings),
            })
            if (!response.ok) {
                throw new Error(`Send settings failed: ${response.statusText} (${response.status})`)
            }
            return await response.json()
        }

        function refreshForm(settings) {
            const ePower = document.getElementById('power')
            const eMode = document.getElementById('mode')
            const ePowerful = document.getElementById('powerful')
            const eQuiet = document.getElementById('quiet')
            const eTemp = document.getElementById('temperature')
            const eTempSlider = document.getElementById('temperature_slider')
            const eFan = document.getElementById('fan_speed')
            const eVert = document.getElementById('vent_vertical')
            const eHoriz = document.getElementById('vent_horizontal')
            const eTon = document.getElementById('timer_on')
            const eTont = document.getElementById('timer_on_time')
            const eToff = document.getElementById('timer_off')
            const eTofft = document.getElementById('timer_off_time')

            // Set input values
            ePower.checked = (settings.power == 'on')
            eMode.value = settings.mode
            ePowerful.checked = (settings.powerful == 'on')
            eQuiet.checked = (settings.quiet == 'on')
            eTemp.value = settings.temp
            eTempSlider.value = settings.temp
            eFan.value = settings.fan
            eVert.value = settings.vert
            eHoriz.value = settings.horiz
            eTon.checked = (settings.ton == 'on')
            eTont.value = (settings.tont == '25:36' ? '' : settings.tont)
            eToff.checked = (settings.toff == 'on')
            eTofft.value = (settings.tofft == '25:36' ? '' : settings.tofft)

            // Set input attributes
            eFan.disabled = ePowerful.checked || eQuiet.checked
            eTont.required = eTon.checked
            eTofft.required = eToff.checked

            // Validate the input fields
            validateInput()
        }

        function storeAndRefresh(allSettings) {
            sessionStorage.setItem('paninvSettings', JSON.stringify(allSettings.settings))
            sessionStorage.setItem('paninvModeSettings', JSON.stringify(allSettings.modeSettings))
            refreshForm(allSettings.settings)
        }

        function refresh(confirm) {
            getSettings()
            .then((allSettings) => {
                storeAndRefresh(allSettings)
                if (confirm) {
                    showConfirmation('Refreshed')
                }
            })
            .catch((err) => {
                if (err.name == 'TypeError' && err.message == 'Failed to fetch') {
                    displayAlerts('Could not get settings')
                } else {
                    displayAlerts(err)
                }
                console.error(err)
            })
        }

        function btnRefresh(e) {
            highlightButton(e.target)
            refresh(true)
        }

        function btnSend(e) {
            highlightButton(e.target)

            const ePower = document.getElementById('power')
            const eMode = document.getElementById('mode')
            const ePowerful = document.getElementById('powerful')
            const eQuiet = document.getElementById('quiet')
            const eTemp = document.getElementById('temperature')
            const eFan = document.getElementById('fan_speed')
            const eVert = document.getElementById('vent_vertical')
            const eHoriz = document.getElementById('vent_horizontal')
            const eTon = document.getElementById('timer_on')
            const eTont = document.getElementById('timer_on_time')
            const eToff = document.getElementById('timer_off')
            const eTofft = document.getElementById('timer_off_time')

            if (!validateInput()) {
                return
            }

            const settings = JSON.parse(sessionStorage.getItem('paninvSettings'))
            let changedSettings = Object.create(null)

            const ePowerValue = ePower.checked ? 'on' : 'off'
            if (settings.power != ePowerValue) {
                changedSettings.power = ePowerValue
            }

            const eModeValue = eMode.value
            if (settings.mode != eModeValue) {
                changedSettings.mode = eModeValue
            }

            const ePowerfulValue = ePowerful.checked ? 'on' : 'off'
            if (settings.powerful != ePowerfulValue) {
                changedSettings.powerful = ePowerfulValue
            }

            const eQuietValue = eQuiet.checked ? 'on' : 'off'
            if (settings.quiet != eQuietValue) {
                changedSettings.quiet = eQuietValue
            }

            const eTempValue = eTemp.value
            if (settings.temp != eTempValue) {
                changedSettings.temp = eTempValue
            }

            if (!eFan.disabled) {
                const eFanValue = eFan.value
                if (settings.fan != eFanValue) {
                    changedSettings.fan = eFanValue
                }
            }

            const eVertValue = eVert.value
            if (settings.vert != eVertValue) {
                changedSettings.vert = eVertValue
            }

            const eHorizValue = eHoriz.value
            if (settings.horiz != eHorizValue) {
                changedSettings.horiz = eHorizValue
            }

            const eTonValue = eTon.checked ? 'on' : 'off'
            if (settings.ton != eTonValue) {
                changedSettings.ton = eTonValue
            }

            const eTontValue = eTont.value
            if (settings.tont != eTontValue && eTontValue != '') {
                changedSettings.tont = eTontValue
            }

            const eToffValue = eToff.checked ? 'on' : 'off'
            if (settings.toff != eToffValue) {
                changedSettings.toff = eToffValue
            }

            const eTofftValue = eTofft.value
            if (settings.tofft != eTofftValue && eTofftValue != '') {
                changedSettings.tofft = eTofftValue
            }

            postSettings(changedSettings)
            .then((allSettings) => {
                storeAndRefresh(allSettings)
                showConfirmation('Sent')
            })
            .catch((err) => {
                if (err.name == 'TypeError' && err.message == 'Failed to fetch') {
                    displayAlerts('Could not send settings')
                } else {
                    displayAlerts(err)
                }
                console.error(err)
            })
        }

        function checkMode() {
            restoreModeSettings()
        }

        function checkPowerful() {
            const ePowerful = document.getElementById('powerful')
            const eQuiet = document.getElementById('quiet')
            const eFan = document.getElementById('fan_speed')
            if (ePowerful.checked) {
                eQuiet.checked = false
                eFan.disabled = true
            }
            else if (!eQuiet.checked) {
                eFan.disabled = false
                restoreModeSettings()
            }
        }

        function checkQuiet() {
            const ePowerful = document.getElementById('powerful')
            const eQuiet = document.getElementById('quiet')
            const eFan = document.getElementById('fan_speed')
            if (eQuiet.checked) {
                ePowerful.checked = false
                eFan.disabled = true
            }
            else if (!ePowerful.checked) {
                eFan.disabled = false
                restoreModeSettings()
            }
        }

        function checkTemp() {
            const eTemp = document.getElementById('temperature')
            const eTempSlider = document.getElementById('temperature_slider')
            if (eTemp.validity.valid) {
                eTempSlider.value = eTemp.value
            }
        }

        function checkTempSlider() {
            const eTemp = document.getElementById('temperature')
            const eTempSlider = document.getElementById('temperature_slider')
            if (eTempSlider.validity.valid) {
                eTemp.value = eTempSlider.value
            }
        }

        function checkTon() {
            const eTon = document.getElementById('timer_on')
            const eTont = document.getElementById('timer_on_time')
            eTont.required = eTon.checked
        }

        function checkToff() {
            const eToff = document.getElementById('timer_off')
            const eTofft = document.getElementById('timer_off_time')
            eTofft.required = eToff.checked
        }

        function validateInput() {
            let alertMsg = ''

            const eTemp = document.getElementById('temperature')
            const eTont = document.getElementById('timer_on_time')
            const eTofft = document.getElementById('timer_off_time')

            if (!eTemp.validity.valid) {
                alertMsg += `<p>Temperature: ${eTemp.validationMessage}</p>`
            }
            if (!eTont.validity.valid) {
                alertMsg += `<p>Timer On Time: ${eTont.validationMessage}</p>`
            }
            if (!eTofft.validity.valid) {
                alertMsg += `<p>Timer Off Time: ${eTofft.validationMessage}</p>`
            }

            if (alertMsg != '') {
                displayAlerts(alertMsg)
                return false
            }

            resetAlerts()
            return true
        }

        function restoreModeSettings() {
            const modeSettings = JSON.parse(sessionStorage.getItem('paninvModeSettings'))
            const eMode = document.getElementById('mode')
            const mode = eMode.value
            const ms = modeSettings[mode]

            const eTemp = document.getElementById('temperature')
            const eTempSlider = document.getElementById('temperature_slider')
            eTemp.value = ms.temp
            eTempSlider.value = ms.temp

            const eFan = document.getElementById('fan_speed')
            eFan.value = ms.fan
        }

        function displayAlerts(alertMsg) {
            const alert = document.getElementById('alert')
            alert.innerHTML = alertMsg
            alert.classList.remove("hidden")
        }

        function resetAlerts() {
            const alert = document.getElementById('alert')
            alert.classList.add("hidden")
            alert.innerHTML = ''
        }

        function showConfirmation(infoMsg) {
            displayInfo(infoMsg)
            setTimeout(resetInfo, 2000)
        }

        function displayInfo(infoMsg) {
            const info = document.getElementById('info')
            info.innerHTML = infoMsg
            info.classList.remove("hidden")
        }

        function resetInfo() {
            const info = document.getElementById('info')
            info.classList.add("hidden")
            info.innerHTML = ''
        }

        function highlightButton(btn) {
            btn.classList.add('btn_highlight')
            setTimeout(() => btn.classList.remove('btn_highlight'), 250)
        }

        function updateFillerHeight(entries) {
            for (const entry of entries) {
                if (entry.target.id == 'controlpanel') {
                    const eFiller = document.getElementById('filler')
                    eFiller.style.height = entry.borderBoxSize[0].blockSize + "px"
                }
            }
        }

        function initialize() {
            const eRefresh = document.getElementById('refresh_button')
            const eSend = document.getElementById('send_button')

            eRefresh.addEventListener('click', btnRefresh)
            eSend.addEventListener('click', btnSend)

            const eMode = document.getElementById('mode')
            const ePowerful = document.getElementById('powerful')
            const eQuiet = document.getElementById('quiet')
            const eTemp = document.getElementById('temperature')
            const eTempSlider = document.getElementById('temperature_slider')
            const eTon = document.getElementById('timer_on')
            const eToff = document.getElementById('timer_off')

            eMode.addEventListener('change', checkMode)
            ePowerful.addEventListener('change', checkPowerful)
            eQuiet.addEventListener('change', checkQuiet)
            eTemp.addEventListener('input', checkTemp)
            eTempSlider.addEventListener('input', checkTempSlider)
            eTon.addEventListener('change', checkTon)
            eToff.addEventListener('change', checkToff)

            refresh(false)
            window.addEventListener('focus', () => refresh(true))

            const eControlPanel = document.getElementById('controlpanel')
            new ResizeObserver(updateFillerHeight).observe(eControlPanel)
        }

        window.addEventListener('load', initialize)
    </script>
</body>
</html>
